import G from"node:fs/promises";import U from"node:module";import K from"process";var j=(e,s)=>new Error(`invalid moduleId: "${e}" (used by ${s})`),A=(e,s)=>new Error(`un-mocked moduleId: "${e}" (used by ${s})`),F=()=>new Error("For versions of node prior to v20.6.0, the loader chain process must include esmock. start the process using --loader=esmock."),T=(e,s)=>new Error(`no mocks provided for module: "${e}" (used by ${s})`),R={errModuleIdNotFound:j,errModuleIdNotMocked:A,errMissingLoader:F,errModuleIdNoDefs:T};var[$,D]=K.versions.node.split(".").map(e=>+e),N=$<16||$===16&&D<12,p=import.meta.url,V=/\?esmkgdefs=.*/,E=/.*\?esmkgdefs=/,h=/#-#esmkdefs/,b=/^file:\/\/\/import\?/,W=/file:\/\/\/import\?([^#]*)/,x=/\bimport,|,import\b|\bimport\b/g,g=/esmkTreeId=\d*/,z=/esmkModuleId=([^&]*)/,y=/\?esmk=\d*/,k=/.*exportNames=(.*)/,B=/.*#-#/,H=/isesm=true/,P=/isfound=false/,q=/^(commonjs|module)$/,J=/strict=3/,w=/^(#![^\n]*\n)/,M=(e,s)=>new RegExp(`.*(${e}(\\?${s}(?:(?!#-#).)*)).*`),I=global.mockKeys=global.mockKeys||{},se=!U.register&&(({port:e})=>(e.addEventListener("message",s=>I[s.data.key]=s.data.keylong),e.unref(),"global.postMessageEsmk = d => port.postMessage(d)")),te=U.register&&(e=>{e&&e.port&&e.port.on("message",s=>{I[s.key]=s.keylong})}),C=e=>{let[s,t]=e.match(W)||[];return[s,k.test(t)&&t.replace(k,"$1").split(",")]},O=e=>{let s=e.split(h)[1]||"",t=C(s),c=e.replace(E,""),r=C(c);return[t[0]||r[0],[...new Set([t[1]||[],r[1]||[]].flat())]]},v=e=>y.test(e)&&I[e.match(y)[0].split("=")[1]],L=async(e,s,t)=>t.parentURL&&(t.conditions.slice(-1)[0]==="node-addons"||t.importAssertions||N)?e(s,t):e(s),oe=async(e,s,t)=>{let{parentURL:c}=s,r=v(c)||c;if(!g.test(r))return L(t,e,s);let[l]=String(r).match(g),[n,d]=r.split(h),o=n&&n.replace(E,"");if(r.includes(`esmkModuleId=${e}&isfound=false`)){let u=M(`file:///${e}`,l),f=(o.match(u)||d.match(u)||[])[2];if(f)return{shortCircuit:!0,url:p+f}}if(b.test(e))return{shortCircuit:!0,url:e.replace(b,p+"?")};let i=await L(t,e,s),m=M(i.url,l),a=m.test(d)&&d.replace(m,"$1")||m.test(o)&&o.replace(m,"$1");if(a?i.url=H.test(a)?a:p+"#-#"+a:o&&o!=="0"&&(i.url.startsWith("node:")||(i.url+="?esmkgdefs="+o)),J.test(r)&&!a)throw R.errModuleIdNotMocked(i.url,r.split("?")[0]);return i},S=p+"?esmock-loader=true",re=(e=>async()=>e=e||(await import(S)).default===!0)(),Q=async(e,s,t)=>{if(e===S)return{format:"module",shortCircuit:!0,responseURL:e,source:"export default true"};let c=v(e)||e;if(c&&(c.match(g)||[])[0]){let[n,d]=O(c);if(d&&d.length){let o=await t(e,s);if(!q.test(o.format))return o;let i=o.source===null||o.source===void 0,m=String(i?await G.readFile(new URL(e)):o.source),a=(m.match(w)||[])[0]||"",u=a?m.replace(w,""):m,f=o.format==="commonjs"?`const {${d}} = global.esmockCacheGet("${n}");`:`import {${d}} from '${n}';`;return{format:o.format,shortCircuit:!0,responseURL:encodeURI(e),source:a+f+u}}}if(h.test(e))return t(e,s);e=e.replace(V,""),e.startsWith(p)&&(e=e.replace(B,""),P.test(e)&&(e=e.replace(p,`file:///${e.match(z)[1]}`)));let l=k.test(e)&&e.replace(k,"$1").replace(x,"").split(",");return l&&l[0]?{format:"module",shortCircuit:!0,responseURL:encodeURI(e),source:l.map(n=>n==="default"?`export default global.esmockCacheGet("${e}").default`:`export const ${n} = global.esmockCacheGet("${e}").${n}`).join(`
`)}:t(e,s)},ne=N&&Q;export{re as default,ne as getSource,se as globalPreload,te as initialize,Q as load,oe as resolve};
