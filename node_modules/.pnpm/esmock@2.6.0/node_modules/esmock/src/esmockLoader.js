import G from"node:fs/promises";import N from"node:module";import D from"process";var A=(e,o)=>new Error(`invalid moduleId: "${e}" (used by ${o})`),F=(e,o)=>new Error(`un-mocked moduleId: "${e}" (used by ${o})`),T=()=>new Error("For versions of node prior to v20.6.0, the loader chain process must include esmock. start the process using --loader=esmock."),v=(e,o)=>new Error(`no mocks provided for module: "${e}" (used by ${o})`),$={errModuleIdNotFound:A,errModuleIdNotMocked:F,errMissingLoader:T,errModuleIdNoDefs:v};var[y,V]=D.versions.node.split(".").map(e=>+e),S=y<16||y===16&&V<12,u=import.meta.url,W=/\?esmkgdefs=.*/,E=/.*\?esmkgdefs=/,R=/#-#esmkdefs/,b=/^file:\/\/\/import\?/,x=/file:\/\/\/import\?([^#]*)/,z=/\bimport,|,import\b|\bimport\b/g,h=/esmkTreeId=\d*/,B=/esmkModuleId=([^&]*)/,w=/\?esmk=\d*/,k=/.*exportNames=(.*)/,H=/.*#-#/,P=/isesm=true/,q=/isfound=false/,J=/^(commonjs|module)$/,O=/strict=3/,M=/^(#![^\n]*\n)/,U=(e,o)=>new RegExp(`.*(${e}(\\?${o}(?:(?!#-#).)*)).*`),I=global.mockKeys=global.mockKeys||{},g=global.mockKeysSource=global.mockKeysSource||{},se=!N.register&&(({port:e})=>(e.addEventListener("message",o=>o.data.keysource?g[o.data.keysource]=o.data.source:I[o.data.key]=o.data.keylong),e.unref(),"global.postMessageEsmk = d => port.postMessage(d)")),te=N.register&&(e=>{e&&e.port&&e.port.on("message",o=>{o.keysource?g[o.keysource]=o.source:I[o.key]=o.keylong})}),C=e=>{let[o,s]=e.match(x)||[];return[o,k.test(s)&&s.replace(k,"$1").split(",")]},Q=e=>{let o=e.split(R)[1]||"",s=C(o),n=e.replace(E,""),r=C(n);return[s[0]||r[0],[...new Set([s[1]||[],r[1]||[]].flat())]]},j=e=>w.test(e)&&I[e.match(w)[0].split("=")[1]],L=async(e,o,s)=>s.parentURL&&(s.conditions.slice(-1)[0]==="node-addons"||s.importAssertions||S)?e(o,s):e(o),re=async(e,o,s)=>{let{parentURL:n}=o,r=j(n)||n;if(!h.test(r))return L(s,e,o);let[l]=String(r).match(h),[c,d]=r.split(R),t=c&&c.replace(E,"");if(r.includes(`esmkModuleId=${e}&isfound=false`)){let p=U(`file:///${e}`,l),f=(t.match(p)||d.match(p)||[])[2];if(f)return{shortCircuit:!0,url:u+f}}if(b.test(e))return{shortCircuit:!0,url:e.replace(b,u+"?")};let i=await L(s,e,o),a=U(i.url,l),m=a.test(d)&&d.replace(a,"$1")||a.test(t)&&t.replace(a,"$1");if(m?i.url=P.test(m)?m:u+"#-#"+m:t&&t!=="0"&&(i.url.startsWith("node:")||(i.url+="?esmkgdefs="+t)),O.test(r)&&!m)throw $.errModuleIdNotMocked(i.url,r.split("?")[0]);return i},K=u+"?esmock-loader=true",ce=(e=>async()=>e=e||(await import(K)).default===!0)(),X=async(e,o,s)=>{if(e===K)return{format:"module",shortCircuit:!0,responseURL:e,source:"export default true"};let n=j(e)||e;if(n&&(n.match(h)||[])[0]){let[c,d]=Q(n);if(d&&d.length){let t=await s(e,o);if(!J.test(t.format))return t;let i=t.source===null||t.source===void 0,a=String(i?await G.readFile(new URL(e)):t.source),m=(a.match(M)||[])[0]||"",p=m?a.replace(M,""):a,f=t.format==="commonjs"?`const {${d}} = global.esmockCacheGet("${c}");`:`import {${d}} from '${c}';`;return{format:t.format,shortCircuit:!0,responseURL:encodeURI(e),source:m+f+p}}}if(R.test(e))return s(e,o);e=e.replace(W,""),e.startsWith(u)&&(e=e.replace(H,""),q.test(e)&&(e=e.replace(u,`file:///${e.match(B)[1]}`)));let l=k.test(e)&&e.replace(k,"$1").replace(z,"").split(",");return l&&l[0]?g[e]?{format:"json",shortCircuit:!0,responseURL:encodeURI(e),source:g[e]}:{format:"module",shortCircuit:!0,responseURL:encodeURI(e),source:l.map(c=>c==="default"?`export default global.esmockCacheGet("${e}").default`:`export const ${c} = global.esmockCacheGet("${e}").${c}`).join(`
`)}:s(e,o)},ne=S&&X;export{ce as default,ne as getSource,se as globalPreload,te as initialize,X as load,re as resolve};
